//------------------------------------------------------------------------------
// <auto-generated>
//    此代码是根据模板生成的。
//
//    手动更改此文件可能会导致应用程序中发生异常行为。
//    如果重新生成代码，则将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
namespace BBICMS.Newsletters
{
    #region 上下文
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    public partial class NewsletterEntities : ObjectContext
    {
        #region 构造函数
    
        /// <summary>
        /// 请使用应用程序配置文件的“NewsletterEntities”部分中的连接字符串初始化新 NewsletterEntities 对象。
        /// </summary>
        public NewsletterEntities() : base("name=NewsletterEntities", "NewsletterEntities")
        {
            OnContextCreated();
        }
    
        /// <summary>
        /// 初始化新的 NewsletterEntities 对象。
        /// </summary>
        public NewsletterEntities(string connectionString) : base(connectionString, "NewsletterEntities")
        {
            OnContextCreated();
        }
    
        /// <summary>
        /// 初始化新的 NewsletterEntities 对象。
        /// </summary>
        public NewsletterEntities(EntityConnection connection) : base(connection, "NewsletterEntities")
        {
            OnContextCreated();
        }
    
        #endregion
    
        #region 分部方法
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet 属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<Newsletter> Newsletters
        {
            get
            {
                if ((_Newsletters == null))
                {
                    _Newsletters = base.CreateObjectSet<Newsletter>("Newsletters");
                }
                return _Newsletters;
            }
        }
        private ObjectSet<Newsletter> _Newsletters;

        #endregion

        #region AddTo 方法
    
        /// <summary>
        /// 用于向 Newsletters EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToNewsletters(Newsletter newsletter)
        {
            base.AddObject("Newsletters", newsletter);
        }

        #endregion

    }

    #endregion

    #region 实体
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NewsletterModel", Name="Newsletter")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Newsletter : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 Newsletter 对象。
        /// </summary>
        /// <param name="newsletterID">NewsletterID 属性的初始值。</param>
        /// <param name="addedDate">AddedDate 属性的初始值。</param>
        /// <param name="addedBy">AddedBy 属性的初始值。</param>
        /// <param name="subject">Subject 属性的初始值。</param>
        /// <param name="plainTextBody">PlainTextBody 属性的初始值。</param>
        /// <param name="htmlBody">HtmlBody 属性的初始值。</param>
        /// <param name="updatedDate">UpdatedDate 属性的初始值。</param>
        /// <param name="active">Active 属性的初始值。</param>
        public static Newsletter CreateNewsletter(global::System.Int32 newsletterID, global::System.DateTime addedDate, global::System.String addedBy, global::System.String subject, global::System.String plainTextBody, global::System.String htmlBody, global::System.DateTime updatedDate, global::System.Boolean active)
        {
            Newsletter newsletter = new Newsletter();
            newsletter.NewsletterID = newsletterID;
            newsletter.AddedDate = addedDate;
            newsletter.AddedBy = addedBy;
            newsletter.Subject = subject;
            newsletter.PlainTextBody = plainTextBody;
            newsletter.HtmlBody = htmlBody;
            newsletter.UpdatedDate = updatedDate;
            newsletter.Active = active;
            return newsletter;
        }

        #endregion

        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 NewsletterID
        {
            get
            {
                return _NewsletterID;
            }
            set
            {
                if (_NewsletterID != value)
                {
                    OnNewsletterIDChanging(value);
                    ReportPropertyChanging("NewsletterID");
                    _NewsletterID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("NewsletterID");
                    OnNewsletterIDChanged();
                }
            }
        }
        private global::System.Int32 _NewsletterID;
        partial void OnNewsletterIDChanging(global::System.Int32 value);
        partial void OnNewsletterIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime AddedDate
        {
            get
            {
                return _AddedDate;
            }
            set
            {
                OnAddedDateChanging(value);
                ReportPropertyChanging("AddedDate");
                _AddedDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AddedDate");
                OnAddedDateChanged();
            }
        }
        private global::System.DateTime _AddedDate;
        partial void OnAddedDateChanging(global::System.DateTime value);
        partial void OnAddedDateChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String AddedBy
        {
            get
            {
                return _AddedBy;
            }
            set
            {
                OnAddedByChanging(value);
                ReportPropertyChanging("AddedBy");
                _AddedBy = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("AddedBy");
                OnAddedByChanged();
            }
        }
        private global::System.String _AddedBy;
        partial void OnAddedByChanging(global::System.String value);
        partial void OnAddedByChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Subject
        {
            get
            {
                return _Subject;
            }
            set
            {
                OnSubjectChanging(value);
                ReportPropertyChanging("Subject");
                _Subject = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Subject");
                OnSubjectChanged();
            }
        }
        private global::System.String _Subject;
        partial void OnSubjectChanging(global::System.String value);
        partial void OnSubjectChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String PlainTextBody
        {
            get
            {
                return _PlainTextBody;
            }
            set
            {
                OnPlainTextBodyChanging(value);
                ReportPropertyChanging("PlainTextBody");
                _PlainTextBody = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("PlainTextBody");
                OnPlainTextBodyChanged();
            }
        }
        private global::System.String _PlainTextBody;
        partial void OnPlainTextBodyChanging(global::System.String value);
        partial void OnPlainTextBodyChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String HtmlBody
        {
            get
            {
                return _HtmlBody;
            }
            set
            {
                OnHtmlBodyChanging(value);
                ReportPropertyChanging("HtmlBody");
                _HtmlBody = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("HtmlBody");
                OnHtmlBodyChanged();
            }
        }
        private global::System.String _HtmlBody;
        partial void OnHtmlBodyChanging(global::System.String value);
        partial void OnHtmlBodyChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DateSent
        {
            get
            {
                return _DateSent;
            }
            set
            {
                OnDateSentChanging(value);
                ReportPropertyChanging("DateSent");
                _DateSent = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateSent");
                OnDateSentChanged();
            }
        }
        private Nullable<global::System.DateTime> _DateSent;
        partial void OnDateSentChanging(Nullable<global::System.DateTime> value);
        partial void OnDateSentChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime UpdatedDate
        {
            get
            {
                return _UpdatedDate;
            }
            set
            {
                OnUpdatedDateChanging(value);
                ReportPropertyChanging("UpdatedDate");
                _UpdatedDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UpdatedDate");
                OnUpdatedDateChanged();
            }
        }
        private global::System.DateTime _UpdatedDate;
        partial void OnUpdatedDateChanging(global::System.DateTime value);
        partial void OnUpdatedDateChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UpdatedBy
        {
            get
            {
                return _UpdatedBy;
            }
            set
            {
                OnUpdatedByChanging(value);
                ReportPropertyChanging("UpdatedBy");
                _UpdatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UpdatedBy");
                OnUpdatedByChanged();
            }
        }
        private global::System.String _UpdatedBy;
        partial void OnUpdatedByChanging(global::System.String value);
        partial void OnUpdatedByChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Active
        {
            get
            {
                return _Active;
            }
            set
            {
                OnActiveChanging(value);
                ReportPropertyChanging("Active");
                _Active = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Active");
                OnActiveChanged();
            }
        }
        private global::System.Boolean _Active;
        partial void OnActiveChanging(global::System.Boolean value);
        partial void OnActiveChanged();

        #endregion

    
    }

    #endregion

    
}
